// test_Spherical_Mesh.cc
// Jun 25, 2019
// (c) Copyright 2019 Triad National Security, all rights reserved

#include "base/soft_equiv.h"
#include "spherical/Spherical_Mesh.h"
#include "gtest/gtest.h"
// #include "mesh_common/Mesh.h"
#include "base/test_common.h"

using murmeln_mesh::geom_t;
using murmeln_mesh::index_t;
using murmeln_mesh::Spherical_1D_Mesh;
using Cell = Spherical_1D_Mesh::Cell;
using Face = Spherical_1D_Mesh::Face;
using murmeln::soft_equiv_os;

TEST(default_mesh_Spherical_1D_mesh, instantiate) {
  index_t n_cells{10};
  Spherical_1D_Mesh m(n_cells);
  // Let's check cell extents
  for (size_t i = 0; i < m.num_cells(); ++i) {
    auto [low, high] = m.get_extents(Cell(i));
    EXPECT_EQ(low, static_cast<geom_t>(i));
    EXPECT_EQ(high, static_cast<geom_t>(i + 1));
  }
  // EXPECT_TRUE(false); // 25 June 2019
  return;
} // TEST(default_mesh_Spherical_1D_mesh, instantiate)

namespace {
Spherical_1D_Mesh make_mesh() {
  std::vector<geom_t> bdys{0.0, 1.0, 2.0, 35.0};
  Spherical_1D_Mesh mesh(std::move(bdys));
  return mesh;
};
} // namespace

TEST(default_mesh_Spherical_1D_mesh, num_cells) {
  Spherical_1D_Mesh mesh{make_mesh()};
  EXPECT_EQ(mesh.num_cells(), 3u);
  return;
} // TEST(default_mesh_Spherical_1D_mesh, num_cells)

TEST(default_mesh_Spherical_1D_mesh, Sphere_1D_volume) {
  Spherical_1D_Mesh mesh{make_mesh()};

  geom_t const vols_exp[] = {4.1887902047863905, 29.321531433504735,
                             179560.86970857819};
  bool p0 = soft_equiv_os(vols_exp[0], mesh.volume(Cell{0}), "volume cell 0");
  bool p1 = soft_equiv_os(vols_exp[1], mesh.volume(Cell{1}), "volume cell 1");
  bool p2 = soft_equiv_os(vols_exp[2], mesh.volume(Cell{2}), "volume cell 2");

  EXPECT_TRUE(p0);
  EXPECT_TRUE(p1);
  EXPECT_TRUE(p2);
  return;
} // TEST(default_mesh_Spherical_1D_mesh, Sphere_1D_volume)

TEST(default_mesh_Spherical_1D_mesh, null_cell) {
  Spherical_1D_Mesh mesh{make_mesh()};
  EXPECT_EQ(0xFFFFFFFC, mesh.null_cell().as_id());
  return;
}

TEST(default_mesh_Spherical_1D_mesh, Sphere_1D_cell_across) {
  Spherical_1D_Mesh mesh{make_mesh()};
  Spherical_1D_Mesh::Vector unused{0.0};

  Cell const nc{mesh.null_cell()};
  Cell const c0{0};
  Cell const c1{1};
  Cell const c2{2};
  Cell const c3{3};
  Cell const c4{4};
  Cell c0l{mesh.cell_across(Cell{0}, Face{0}, unused)};
  EXPECT_EQ(nc.as_id(), c0l.as_id());
  Cell c0h{mesh.cell_across(Cell{0}, Face{1}, unused)};
  EXPECT_EQ(c1.as_id(), c0h.as_id());
  Cell c1l{mesh.cell_across(Cell{1}, Face{1}, unused)};
  EXPECT_EQ(c0.as_id(), c1l.as_id());
  Cell c1h{mesh.cell_across(Cell{1}, Face{2}, unused)};
  EXPECT_EQ(c2.as_id(), c1h.as_id());
  Cell c2l{mesh.cell_across(Cell{2}, Face{2}, unused)};
  EXPECT_EQ(c1.as_id(), c2l.as_id());
  Cell c2h{mesh.cell_across(Cell{2}, Face{3}, unused)};
  EXPECT_EQ(nc.as_id(), c2h.as_id());

  return;
} // TEST(default_mesh_Spherical_1D_mesh, Sphere_1D_cell_across)

TEST(default_mesh_Spherical_1D_mesh, Sphere_1D_is_boundary) {
  Spherical_1D_Mesh mesh{make_mesh()};
  EXPECT_TRUE(mesh.is_boundary(Face{0ull}));
  EXPECT_FALSE(mesh.is_boundary(Face{1ull}));
  EXPECT_FALSE(mesh.is_boundary(Face{2ull}));
  EXPECT_TRUE(mesh.is_boundary(Face{3ull}));
  return;
} // TEST(default_mesh_Spherical_1D_mesh, Sphere_1D_cell_across)

TEST(default_mesh_Spherical_1D_mesh, distance_to_boundary_theta_0_cell_1) {
  Spherical_1D_Mesh mesh{make_mesh()};

  Spherical_1D_Mesh::Intersection_T d_n_face =
      mesh.intersection({{0.5}, {1.0}}, Cell{0});

  bool passed1 = soft_equiv_os(mesh.get_distance(d_n_face), 0.5, "distance");
  EXPECT_EQ(mesh.get_face(d_n_face), Face(1u));
  EXPECT_TRUE(passed1);
  return;
} // test_5

TEST(default_mesh_Spherical_1D_mesh, distance_to_boundary_theta_pi_cell_1) {
  Spherical_1D_Mesh mesh{make_mesh()};

  Spherical_1D_Mesh::Intersection_T d_n_face =
      mesh.intersection({{0.5}, {-1.0}}, Cell{0});

  bool passed1 = soft_equiv_os(mesh.get_distance(d_n_face), 1.5, "distance");
  EXPECT_EQ(mesh.get_face(d_n_face), Face(1u));
  EXPECT_TRUE(passed1);
  return;
} // test_6

TEST(default_mesh_Spherical_1D_mesh, distance_to_boundary_theta_pi_cell_2) {
  Spherical_1D_Mesh mesh{make_mesh()};

  Spherical_1D_Mesh::Intersection_T d_n_face =
      mesh.intersection({{1.5}, {-1.0}}, Cell{1});

  bool passed1 = soft_equiv_os(mesh.get_distance(d_n_face), 0.5, "distance");
  EXPECT_EQ(mesh.get_face(d_n_face), Face(0u));
  EXPECT_TRUE(passed1);
  return;
} // test_7

constexpr size_t n_d2b_test_cases{100};
extern std::tuple<double, double, double, double, double, index_t>
    d2b_test_cases[n_d2b_test_cases];

TEST(default_mesh_Spherical_1D_mesh, dist_to_boundary_impl_100_random_tests) {
  // This test has limited tolerance because of cancellation in
  // the code when computing the determinant.  The determinant is
  // 1.0*1.33333333333 - 4.0*0.33333333333. The exact value is
  // 1*4/3-4*1/3 = 0.  The floating point version fails pretty badly.
  using S1 = Spherical_1D_Mesh;
  std::string const label = "d2b test case ";
  geom_t const tol = 3.4e-12;
  // test_aux::soft_eq_bound_tol<geom_t> s_eq(tol);
  for (size_t i = 0; i < n_d2b_test_cases; ++i) {
    // for (size_t i = 0; i < 3; ++i) {
    auto [x, o, rl, rh, d, f] = d2b_test_cases[i];

    S1::Intersection_T dnf = S1::dist_to_bdy_impl(x, o, rl, rh);
    SCOPED_TRACE(label + std::to_string(i));
    bool passed_dist = soft_equiv_os(S1::get_distance(dnf), d, "distance", tol);
    EXPECT_TRUE(passed_dist);
    EXPECT_EQ(Face{f}, S1::get_face(dnf));
  }
  return;
} // distance_to_boundary_impl_100_random_tests

/* This test uses a different mesh. */
TEST(default_mesh_Spherical_1D_mesh, sample_position) {
  std::vector<geom_t> bdys{0.0, 1.0, 2.0, 3.0};
  Spherical_1D_Mesh mesh(std::move(bdys));

  geom_t rns[] = {0.1};
  Buffer_RNG<1> rng(rns, rns + 1);

  Spherical_1D_Mesh::Vector position = mesh.sample_position(rng, Cell{1});
  bool sample_ok =
      soft_equiv_os(position[0], 1.193483191927337, "sampled position");
  EXPECT_TRUE(sample_ok);
  return;
} // TEST(default_mesh_Spherical_1D_mesh, sample_position)

/* This test uses a different mesh. */
TEST(default_mesh_Spherical_1D_mesh, sample_direction) {

  geom_t rns[] = {0.1, 0.2, 0.3};
  Buffer_RNG<3> rng(rns, rns + 3);
  {
    Spherical_1D_Mesh::Vector direction =
        Spherical_1D_Mesh::sample_direction_isotropic(rng);
    bool sample_ok = soft_equiv_os(direction[0], -0.8, "sampled direction 0");
    EXPECT_TRUE(sample_ok);
  }
  {
    Spherical_1D_Mesh::Vector direction =
        Spherical_1D_Mesh::sample_direction_isotropic(rng);
    bool sample_ok = soft_equiv_os(direction[0], -0.6, "sampled direction 1");
    EXPECT_TRUE(sample_ok);
  }
  {
    Spherical_1D_Mesh::Vector direction =
        Spherical_1D_Mesh::sample_direction_isotropic(rng);
    bool sample_ok = soft_equiv_os(direction[0], -0.4, "sampled direction 2");
    EXPECT_TRUE(sample_ok);
  }
  return;
} // TEST(default_mesh_Spherical_1D_mesh, sample_position)

/* Distance to boundary test cases generated in Mathematica: */
std::tuple<double, double, double, double, double, index_t>
    d2b_test_cases[n_d2b_test_cases] = {
        {874.2153502626182, -0.03033663375173612, 777.8031650087146,
         909.9127641144195, 280.2767555431319, 1},
        {739.5305386622146, -0.14307028584740067, 709.965695760133,
         822.5307441896388, 481.09949362525634, 1},
        {359.6473848610964, 0.17305031373270552, 352.7618028981133,
         420.773585284999, 164.86998406430524, 1},
        {886.8311587844871, 0.46121737024899545, 839.1333934311679,
         1009.6636244204961, 223.63126671365598, 1},
        {568.3620502786575, -0.23930435259185412, 527.8754766920204,
         704.1833666255529, 573.4334199811067, 1},
        {267.8464032914738, -0.547598222447438, 224.80545606495684,
         301.60979199467147, 129.10702781779267, 0},
        {541.7900662787413, -0.952109897533806, 487.72544704666416,
         598.1365295343455, 57.11245315000766, 0},
        {873.2379473868693, -0.6399762815968693, 850.9067631131463,
         920.3726005914009, 35.5802404125457, 0},
        {297.33210065342246, -0.10290097025164746, 283.11763768977244,
         331.1071262191506, 179.46366142355302, 1},
        {993.2972853077104, 0.9596901736558299, 948.8030613477008,
         994.3159170044139, 1.061370613355976, 1},
        {369.92912404107807, 0.2667894503828223, 356.5580084999324,
         478.6283247198687, 220.64654004462236, 1},
        {560.6447247186366, -0.5794229416159142, 553.0717938206678,
         621.6786761089912, 13.251804754872701, 0},
        {899.7449706899623, -0.6744542760147199, 833.6139841099259,
         925.2463822723373, 103.22765304850122, 0},
        {576.1085675798107, -0.2303599132833969, 557.7034432814494,
         616.2125998943784, 388.5041225518305, 1},
        {728.697162194306, 0.5946977255548012, 712.1618249308217,
         730.2210779648419, 2.557636736625827, 1},
        {639.7883067592547, -0.7245540535212744, 611.7384629372441,
         793.3535709388448, 39.55193525321076, 0},
        {419.4392097469225, 0.43555160581358754, 396.49028893339346,
         534.9313487866261, 196.25451504984014, 1},
        {593.9811855239203, -0.13704059445256567, 465.86805398000547,
         598.0618489334039, 188.59193491770094, 1},
        {929.140163151597, 0.457691478997134, 887.3484743460783,
         942.1411018672693, 27.701925975165096, 1},
        {577.0762789223644, -0.13867542775000397, 511.16229872520694,
         611.444383828537, 297.40019771439046, 1},
        {496.86431016881613, 0.6486929958418699, 487.43817216985803,
         625.0035367297136, 175.32256876589003, 1},
        {563.1405854998501, 0.4441524176205376, 477.96619403371324,
         592.9261281919214, 61.318690416562546, 1},
        {914.9358139255389, -0.9934030852025857, 911.0413480167033,
         918.7646723739188, 3.920439642179691, 0},
        {345.25157808113113, 0.9185813389608444, 330.7245638314844,
         449.5085656549189, 111.15511985311633, 1},
        {633.272442356884, 0.09213104265044159, 598.3387203712086,
         755.6482330949289, 358.0383389378323, 1},
        {203.23283925176855, -0.3555650052542947, 125.90986474959595,
         223.77135081892595, 190.54983617251912, 1},
        {827.127754638394, -0.23315253751447873, 758.8398590082065,
         955.881734131246, 709.3345991975053, 1},
        {108.77273048851522, -0.257372751482126, 91.70854596723325,
         123.6738393623219, 93.16751863269833, 1},
        {774.0890575925043, 0.2962073160361278, 734.5673846399011,
         859.107958201022, 208.23276300202303, 1},
        {626.4386861202061, -0.6192173635100073, 550.9436898545746,
         743.1042988579782, 139.74599478015597, 0},
        {885.1471244849737, 0.37031385644993353, 848.0032383690232,
         890.4394860876546, 14.03385545730026, 1},
        {604.9366652501874, -0.00021110434061943906, 604.1473698285702,
         621.0612958884399, 140.7292004631697, 1},
        {504.3198447299529, 0.9655044814648552, 498.0303651994668,
         523.7019107946758, 20.04760141267793, 1},
        {1055.4925624005605, -0.8274715268509594, 935.5896522529015,
         1063.7471318467726, 149.46075426452734, 0},
        {377.1158268242932, 0.8486297212850258, 369.37373722650705,
         491.51944249340477, 129.18462290947994, 1},
        {611.9059629779958, 0.6748723148214997, 603.5809587375695,
         615.8190720491253, 5.7764351581209725, 1},
        {72.76913949302826, -0.22806008317363746, 17.953994018444632,
         73.30774486940996, 35.41318133767846, 1},
        {552.7568349472464, 0.22571874896267285, 542.3283754489084,
         724.8908550099186, 360.5092288454081, 1},
        {775.3712648666592, 0.46160471739372655, 633.3888889502459,
         780.1982349509362, 10.340120765348685, 1},
        {310.30994589185786, 0.23230160366269725, 309.9057115618839,
         315.83414176833617, 20.94816045969624, 1},
        {202.709163829038, 0.0993359878656781, 102.93505186381708,
         291.7577591163991, 190.66467188454362, 1},
        {864.6031253007001, -0.10426192050766225, 756.0270058111371,
         915.1802063102407, 403.42205608895677, 1},
        {516.5463987479951, -0.20851168119912789, 438.8455799108792,
         602.9551813467388, 436.8493037625859, 1},
        {257.89291809134477, 0.3637434774780983, 111.86205994808051,
         274.53157786245765, 39.078641429502184, 1},
        {174.64208086107584, 0.2936765526069718, 165.94523248655833,
         313.3590019790171, 213.89937725827036, 1},
        {74.8815033821894, -0.15557970242348418, 52.61469056758074,
         82.84783142113457, 48.9628695838838, 1},
        {621.8748372819153, 0.31878560445123094, 620.9458756418117,
         637.4785223065023, 44.55462072806939, 1},
        {902.7793943920236, -0.8247853234251146, 817.3804632306337,
         999.5788339094678, 106.21988151834995, 0},
        {727.9653562971693, 0.24853878471549518, 723.6934931437747,
         757.8107764310984, 96.70237770208604, 1},
        {922.4580783054486, 0.5978121517089487, 873.8942336988812,
         1072.1573884405948, 224.8789712307825, 1},
        {803.5858151366704, 0.9378139928277904, 652.0201989373647,
         843.7829993823375, 42.72364628126807, 1},
        {377.6657537401995, -0.9542461169947254, 364.8264657611521,
         419.7146714982823, 13.478231712882788, 0},
        {325.15915324751995, 0.8671212870597, 308.13800331767584,
         331.9311391527441, 7.7836207138497775, 1},
        {941.7235070767672, -0.21478705626605965, 931.8918107910886,
         977.9232481585695, 52.29554144103488, 0},
        {441.9936243419802, 0.010102069933997093, 424.7077787330984,
         453.52176477543946, 97.2382623337492, 1},
        {436.4029597513562, -0.24951128210630102, 427.16516873894716,
         461.518351256053, 46.60570315306243, 0},
        {971.4301226812836, 0.10965105908230433, 933.1074622942356,
         1052.8066597022294, 313.0904481643627, 1},
        {807.4987522221504, 0.7993639668868235, 760.8199321402294,
         817.4546241917888, 12.412182637739814, 1},
        {995.0797164156887, -0.5347063653870192, 993.3205808603152,
         1040.6379023272104, 3.2972177635803073, 0},
        {312.47670342542983, 0.13159076244904, 175.6833039696328,
         352.6404422132688, 127.41690513175446, 1},
        {490.48725533089384, -0.15971771528341838, 419.46464413066496,
         494.3498194479481, 178.0444394891509, 1},
        {281.96081077201745, -0.16657132545481712, 270.20842352596674,
         293.2407112514598, 140.20861578263052, 1},
        {1073.4570124292115, -0.8751104126794789, 906.3099501086626,
         1096.4359534893813, 196.73080386865024, 0},
        {195.73408828234932, -0.5800228373994445, 190.46862046399406,
         309.3494515888048, 9.340137381018337, 0},
        {683.6898936686363, 0.9701658212050903, 673.3607708520717,
         690.2120043492506, 6.720693823050835, 1},
        {454.0137504005387, 0.7067020956744936, 424.5566524091232,
         547.1616557608023, 122.09639811281332, 1},
        {1015.70688847206, 0.2105265569534276, 919.1794286461802,
         1024.6432740640532, 39.06596454482041, 1},
        {1032.4372786091321, 0.4086399003628842, 942.912556883831,
         1133.3253617235673, 207.7834930316393, 1},
        {1019.7240308373591, -0.42276558284896826, 986.7299288674196,
         1064.9038266270627, 85.20003864312977, 0},
        {223.6454060113848, -0.6358438769509664, 199.37758920817942,
         255.81709055030308, 42.42376196161549, 0},
        {698.6563424412027, 0.4727835183931348, 606.6355661919615,
         713.6895042867209, 30.711499378063273, 1},
        {693.5208088428545, 0.44991764719545646, 645.7802861041371,
         701.7236363782354, 17.83022569998685, 1},
        {256.76753956290645, -0.907422159137401, 248.88763953676903,
         269.05891768901193, 8.713514211316491, 0},
        {348.2718617837195, 0.5108196692722697, 347.5531616390008,
         365.54058775246546, 31.801644517334598, 1},
        {1018.8123312034563, 0.24869876875646968, 972.8882535836624,
         1134.1490575405187, 305.65358503798717, 1},
        {45.42101916463845, 0.7220054570556762, 37.319646309114205,
         45.52992360882166, 0.1506707444469689, 1},
        {676.4200698235035, 0.2944646316821622, 672.3024611709598,
         736.397692488805, 153.53741434914176, 1},
        {41.666002779726156, -0.30424783657626575, 30.16005697477135,
         154.75749424163791, 162.25796405575474, 1},
        {725.8128195546789, 0.788265596136204, 700.6884933666099,
         747.0382131689896, 26.69752520396909, 1},
        {790.328071094304, -0.3471150484721406, 768.1389947940991,
         794.0314629081256, 72.64535303389815, 0},
        {391.6086862497455, 0.738283783419083, 358.3778116903602,
         489.7384121047945, 123.28408852287366, 1},
        {365.75025700959446, 0.7986633599060999, 294.6709148764496,
         470.13381176563405, 123.3180620592988, 1},
        {793.0387078895052, 0.36080038051320207, 766.4641697208792,
         910.237468957348, 244.42903154393287, 1},
        {394.12585228406397, -0.4011307898771741, 273.4182364763574,
         407.5029779676682, 347.0876528637904, 1},
        {568.7269499547582, -0.6629062707924609, 558.7519484714205,
         581.1449813684758, 15.222745600056692, 0},
        {404.9029219219859, 0.7866001206165816, 240.07274550712054,
         417.90219194890665, 16.370459010849615, 1},
        {229.68576488684235, -0.26346561983331673, 165.06160454933092,
         257.8816618610371, 192.45891855557704, 1},
        {339.81210636681783, 0.19290211975504912, 334.5667513807675,
         377.75761160862726, 112.00348897976187, 1},
        {594.4411408107612, -0.8889291467903377, 587.404575471219,
         628.2433691558797, 7.9284061594012325, 0},
        {774.5154063117095, 0.7359191640394425, 734.4708451662807,
         844.4690434638976, 91.93458426752541, 1},
        {695.3121729097788, -0.4389622786691243, 640.9038371014651,
         793.7668780732115, 162.19342303737344, 0},
        {834.0940337765742, 0.3732645797244545, 797.3852903915113,
         842.999448462057, 23.126608468740027, 1},
        {858.6321060648309, 0.9053658745011735, 848.2123573384874,
         932.0381039030967, 80.3881549771462, 1},
        {157.16305537399, -0.6858412569543297, 114.00008534425137,
         267.8939941626765, 350.03963438254135, 1},
        {701.0675040572786, 0.28061976982468906, 695.24422907243,
         716.4229786931545, 49.17363461002282, 1},
        {487.46103100919476, 0.09817565639601566, 429.6818565371516,
         536.056367724158, 180.24064303880704, 1},
        {599.3093717409276, -0.32374204584576605, 567.5243911917976,
         608.7272134495987, 170.4290766405198, 0},
        {558.803071176873, 0.6168205244880611, 543.3553712028813,
         703.2359860829624, 204.0310269381856, 1},
        {764.9246301685787, -0.30742003551143293, 757.094767418394,
         842.1271101396636, 26.874967409181487, 0},
        {934.1071854494862, 0.9215436527178302, 915.7339252093132,
         936.202146795913, 2.2728661894828077, 1}};

// End of file
